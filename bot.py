import telebot
from telebot import types
import requests
import json

ADMIN_CHAT_ID = "1045530860"
KEY = "6852207591:AAH9CEoxLGFmo_OhwXK2ai-rgPHPEvXqYrw"
API = "http://127.0.0.1:8000/"
headers = {'Content-Type': 'application/json', "Authorizations":"ttg45"}

waiting_message = " ŸÑŸÇÿØ ÿßÿ≥ÿ™ŸÇÿ®ŸÑŸÜÿß ÿ∑ŸÑÿ®ŸÉ ÿ≥ŸàŸÅ Ÿäÿ™ŸÖ ÿßÿ∂ÿßŸÅÿ™ŸÉ ŸÅŸä ÿßŸÑÿ®Ÿàÿ™ ŸÅŸä ÿØŸÇÿßÿ¶ŸÇ ŸÇŸÑŸäŸÑŸá ŸÖŸÜ ÿ∑ÿ±ŸÅ ÿßŸÑÿßÿØŸÖŸÜ ÿ¥ŸÉÿ±ÿß ÿπŸÑŸâ ÿßŸÜÿ™ÿ∏ÿßÿ±ŸÉ ü•∞"
signup_button = 'ÿ≥ÿ¨ŸÑ ŸÜŸÅÿ≥ŸÉ üìã'
cancel_button = 'ÿßŸÑÿ∫ÿßÿ°'
full_name_message = 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ£ŸÉÿ™ÿ® ÿßŸÑÿ•ÿ≥ŸÖ Ÿà ÿßŸÑŸÑŸÇÿ® ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ'
phone_number_message = 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ£ŸÉÿ™ÿ® ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ'

welcome_message = "ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ŸÉ ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿ™ÿßÿ¨ÿ± ŸÅŸä ÿßŸÑÿ®Ÿàÿ™ ÿ±ŸÇŸÖ Ÿàÿßÿ≠ÿØ ŸÅŸä ÿßŸÑÿ®Ÿäÿπ ÿ®ÿßŸÑÿ¨ŸÖŸÑÿ© ŸÉŸÑ ŸÖŸÜ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉÿßÿ™ ŸàÿßŸÑŸÖŸÜÿ™Ÿàÿ¨ÿßÿ™ ÿßŸÑÿ™Ÿä ŸÑŸáÿß ÿπŸÑÿßŸÇÿ© ÿ®ÿßŸÑ⁄®ÿßŸäŸÖŸäŸÜ⁄® ( Xbox - Psn - Pc) üòç" 
welcome_message_2 = "‚Ä¢ ÿßŸáŸÑÿ£ ÿ®ŸÉ ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑÿ™ÿßÿ¨ÿ± {name} üëãüèº .\nŸÜÿ≠ŸÜ ŸáŸÜÿß ŸÑŸÜŸàŸÅÿ± ŸÑŸÉŸÖ ŸÉŸÑ ŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿ¨ŸÖŸÑÿ© ÿ®ÿ£ŸÅÿ∂ŸÑ ÿßÿ≥ÿπÿßÿ± ü§©\nŸÖÿπŸÑŸàŸÖÿßÿ™ŸÉ {pk}\nŸÜŸÇÿßÿ∑ŸÉ   {balance}\n‚Ä¢ ŸÇŸÖ ÿ®ÿ£ÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÇÿ≥ŸÖ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØŸá ŸÖŸÜ ÿßŸÑÿßÿ≥ŸÅŸÑ üëáüèΩ."

balance_btn = "üí∞ ÿ±ÿµŸäÿØŸä"
products_btn = "üõí ÿßŸÑÿπÿ±Ÿàÿ∂ ÿßŸÑÿ™Ÿä ŸäŸÇÿØŸÖŸáÿß ÿßŸÑÿ®Ÿàÿ™"
ask_for_balance_btn = "üíµ ÿ¥ÿ≠ŸÜ ÿ≠ÿ≥ÿßÿ®Ÿä"
contact_us_btn = "‚òéÔ∏è ÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß"
history_btn = "üìã ÿ™ÿπÿßŸÖŸÑÿßÿ™Ÿä"
buy_btn = "ÿ¥ÿ±ÿßÿ°"
back_btn = "ÿ±ÿ¨Ÿàÿπ"

admin_msg = """
ÿßŸÑÿ≤ÿ®ŸàŸÜ: {user} 
ÿ•ÿ¥ÿ™ÿ±Ÿâ ÿßŸÑŸÖŸÜÿ™Ÿàÿ¨: {pack} 
ÿ®ÿ≥ÿπÿ± : {price}
ÿßŸÑÿ¢ŸÜ
"""
history_msg = """
üåÄ ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÇÿ≥ŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ≠ÿ≥ÿßÿ®ŸÉ ÿ®ÿ®Ÿàÿ™ ÿßŸÑŸÖÿ™ÿ¨ÿ±! üåÄ

ÿ±ÿµŸäÿØ ÿ≠ÿ≥ÿßÿ®ŸÉ ÿßŸÑÿ≠ÿßŸÑŸä: {balance} ŸÜŸÇÿ∑ÿ©

ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿ≠ÿ≥ÿßÿ®ŸÉ:
- üõí ÿßŸÑÿ≥ŸÑÿπ ÿßŸÑÿ™Ÿä ÿßÿ¥ÿ™ÿ±Ÿäÿ™Ÿáÿß: {orders}
- üí∏ ÿßŸÑÿ±ÿµŸäÿØ ÿßŸÑÿ∞Ÿä ÿßÿ≥ÿ™ÿÆÿØŸÖÿ™Ÿá: {used_balance}
\n
"""
balance_msg = """
üåÄ ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ŸÇÿ≥ŸÖ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ±ÿµŸäÿØŸä ÿ®ÿ®Ÿàÿ™ ÿßŸÑŸÖÿ™ÿ¨ÿ±! üåÄ

ÿ±ÿµŸäÿØ ÿ≠ÿ≥ÿßÿ®ŸÉ ÿßŸÑÿ≠ÿßŸÑŸä: {balance} ŸÜŸÇÿ∑ÿ©
\n
""" 
contact_us_msg = """
ÿ™ÿ±ŸäÿØ ÿßŸäÿØÿßÿπ ÿ¥ŸÉŸàŸâ ÿßŸà ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ± ÿßŸÖÿ± ŸÖÿß ÿ™ŸàÿßÿµŸÑ ŸÖÿπŸÜÿß ŸÖŸÜ ŸáŸÜÿß : 
‚òéÔ∏è ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ 0794909201
Ÿàÿßÿ™ÿ≥ÿßÿ® 213794909201+
ÿ™ŸäŸÑŸä⁄®ÿ±ÿßŸÖ Skilled04@
"""

products_msg = """
ÿßÿÆÿ™ÿ± ÿπÿ±ÿ∂ ŸÖŸÜ Ÿáÿ∞Ÿá ÿßŸÑÿπÿ±Ÿàÿ∂
"""

packs_msg="""
ÿßÿÆÿ™ÿ± ÿßŸÑŸÖŸÜÿ™Ÿàÿ¨ ÿßŸÑÿ∞Ÿä ÿ™ÿ±ŸäÿØ ÿ¥ÿ±ÿßÿ§Ÿá
"""

buy_msg = """
üîñ ÿßÿ≥ŸÖ ÿßŸÑÿ≥ŸÑÿπÿ©: {pack}
üìù ŸàÿµŸÅ ÿßŸÑÿ≥ŸÑÿπÿ©: {description}

üí≤ ÿßŸÑÿ≥ÿπÿ± ÿßŸÑÿ≠ÿßŸÑŸä: {price} ŸÜŸÇÿ∑ÿ©
‚úÖ ÿ≠ÿßŸÑÿ© ÿßŸÑÿ™ŸàŸÅÿ±: {count}

‚ùì - ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ±ÿ∫ÿ®ÿ™ŸÉ ŸÅŸä ÿßŸÑÿ¥ÿ±ÿßÿ°ÿü
"""

success_msg = """
üéâ ÿπŸÖŸÑŸäÿ© ÿ¥ÿ±ÿßÿ° ŸÜÿßÿ¨ÿ≠ÿ©! üéâ

üí∏ ÿ™ŸÖ ÿÆÿµŸÖ {price} ŸÜŸÇÿ∑ÿ© ÿ®ŸÜÿ¨ÿßÿ≠!

üéÅ ÿßŸÑÿ≥ŸÑÿπÿ© ÿßŸÑÿ™Ÿä ÿßÿÆÿ™ÿ±ÿ™Ÿáÿß ŸáŸä:
 
{code}
"""

ask_for_balance_msg = """
ÿ™ÿ±ŸäÿØ ÿ¥ÿ≠ŸÜ ÿ≠ÿ≥ÿßÿ®ŸÉ ŸÑÿ¥ÿ±ÿßÿ° ŸÖŸÜÿ™ÿ¨ÿßÿ™ŸÜÿß ÿ™ŸàÿßÿµŸÑŸàÿß ŸÖÿπŸÜÿß ŸáŸÜÿß: 
‚òéÔ∏è ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ 0794909201
üì±Ÿàÿßÿ™ÿ≥ÿßÿ® 213794909201+
‚úâÔ∏è ÿ™ŸäŸÑŸä⁄®ÿ±ÿßŸÖ Skilled04@
"""

error_msg = "ÿ±ÿµŸäÿØŸÉ ÿ∫Ÿäÿ± ŸÉÿßŸÅ"

bot = telebot.TeleBot(KEY, parse_mode=None)


class ProductsState:
    def __init__(self) -> None:
        self.products = []
        self.selected_product = None

    def clear(self):
        self.products = []
        self.selected_product = None
    
    def add(self, product):
        self.products.append(product)
    
    def get(self):
        return self.products

    def check(self, title):
        for product in self.products:
            if title == product['title']:
                self.selected_product = product 
                return True
        return False


class PackState:
    def __init__(self) -> None:
        self.packs = []
        self.selected_pack = None

    def clear(self):
        self.packs = []
        self.selected_pack = None

    
    def add(self, pack):
        self.packs.append(pack)
    
    def get(self):
        return self.packs

    def check(self, title):
        for pack in self.packs:
            if title == pack['title']:
                self.selected_pack = pack 
                return True
        return False



product_state = ProductsState()
pack_state = PackState()

def signup(data):
    response = requests.post(API+"user/create", data=stringify(data), headers=headers)
    return response.json()

def get_details(id):
    response = requests.get(API + f"user/details/{id}", headers=headers)
    return response.json()


def get_products():
    response = requests.get(API + f"products/list", headers=headers)
    return response.json()

def get_order_details(id):
    response = requests.get(API + f"products/order/details/{id}", headers=headers)
    return response.json()


def get_packs(id):
    response = requests.get(API + f"products/pack/{id}", headers=headers)
    return response.json()

def buy(data):
    response = requests.post(API + f"products/buy", data=stringify(data), headers=headers)
    return response.json()


def stringify(data):
    return json.dumps(data)

def loads(data):
    return json.loads(data)

@bot.message_handler(func=lambda message: message.text.lower() == cancel_button)
@bot.message_handler(func=lambda message: message.text.lower() == back_btn)
@bot.message_handler(commands=['start'])
def send_welcome(message):
    response = get_details(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(row_width=2)
    if response.get('active') == False :
        bot.send_message(message.chat.id, waiting_message)
    if response.get('active') == True :
        markup.add(
            types.InlineKeyboardButton(balance_btn),
            types.InlineKeyboardButton(products_btn)
        )
        markup.add(
            types.InlineKeyboardButton(ask_for_balance_btn),
            types.InlineKeyboardButton(contact_us_btn),
        )
        markup.add(
            types.InlineKeyboardButton(history_btn)
        )
        bot.send_message(
            message.chat.id, 
            welcome_message_2.format(
                pk=message.from_user.id,
                name=response.get('full_name'),
                balance=response.get('balance')
                ), 
            reply_markup=markup)
    
    if response.get('active') == None :
        itembtn1 = types.InlineKeyboardButton(signup_button)
        markup.add(itembtn1)
        bot.send_message(message.chat.id, welcome_message, reply_markup=markup)

# Sign Up steps

@bot.message_handler(func=lambda message: message.text.lower() == signup_button)
def get_full_name(message):

    markup = types.ReplyKeyboardMarkup(row_width=2)
    itembtn1 = types.InlineKeyboardButton(cancel_button)
    markup.add(itembtn1)

    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id
    bot.send_message(message.chat.id, full_name_message, reply_markup=markup)
    bot.register_next_step_handler(message,get_phone_number, data={"tg_username": username, "tg_id":user_id, "chat_id": chat_id})


def get_phone_number(message, data):
    if message.text != cancel_button:
        data['full_name'] = message.text
        bot.send_message(message.chat.id, phone_number_message)
        bot.register_next_step_handler(message, send_waiting_message, data=data)


def send_waiting_message(message, data):
    if message.text != cancel_button:
        data['phone_number'] = message.text
        signup(data)
        bot.send_message(message.chat.id, waiting_message)

# End Signup Steps


@bot.message_handler(func=lambda message: message.text.lower() == balance_btn)
def get_full_name(message):
    response = get_details(message.from_user.id)
    bot.send_message(message.chat.id, balance_msg.format(balance=response.get('balance')))


@bot.message_handler(func=lambda message: message.text.lower() == history_btn)
def get_full_name(message):
    response = get_details(message.from_user.id)
    bot.send_message(message.chat.id, history_msg.format(balance=response.get('balance'), orders=response.get('orders'), used_balance=response.get('used_balance')))

@bot.message_handler(func=lambda message: message.text.lower() == contact_us_btn)
def get_full_name(message):
    bot.send_message(message.chat.id, contact_us_msg)

@bot.message_handler(func=lambda message: message.text.lower() == products_btn)
def product_list(message):
    
    resposne = get_products()
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
    resposne = json.loads(resposne)
    arr = []
    product_state.clear()
    
    for product in resposne:
        if len(arr) == 1:
            arr.append(types.InlineKeyboardButton(
                product['fields']["title"], 
                ))
            markup.add(arr[0], arr[1])
            arr = []
        elif len(arr) == 0:
            arr.append(types.InlineKeyboardButton(product['fields']["title"]))
        product_state.add({"title": product['fields']["title"], "id": product['pk'] })
    
    if len(arr) == 1:
        markup.add(types.InlineKeyboardButton(product['fields']["title"]))
    markup.add(
        types.InlineKeyboardButton(text=back_btn),
    )
    bot.send_message(message.chat.id, products_msg, reply_markup=markup)



@bot.message_handler(func=lambda message: product_state.check(message.text))
def pack_list(message):
    pack_id = product_state.selected_product["id"]
    resposne = get_packs(pack_id)
    markup = types.InlineKeyboardMarkup(row_width=3)
    markup.add(
        types.InlineKeyboardButton(text="ÿßŸÑÿ≥ÿπÿ±", callback_data="hey2"),
        types.InlineKeyboardButton(text="ÿßŸÑÿßÿ≥ŸÖ", callback_data="hey1"),
        types.InlineKeyboardButton(text="ÿßŸÑÿ™ŸàŸÅÿ±", callback_data="hey"),
        )
    for pack in resposne:
        data = f"order_details+{pack['id']}" 
        markup.add(
            types.InlineKeyboardButton(text=pack["price"], callback_data=data),
            types.InlineKeyboardButton(text=pack["name"], callback_data=data),
            types.InlineKeyboardButton(text=pack["count"], callback_data=data),
            )
    markup.add(
        types.InlineKeyboardButton(text="ÿ±ÿ¨Ÿàÿπ", callback_data="product_list"),
    )
    markup = markup
    bot.send_message(message.chat.id, packs_msg, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def handler(call):
    func = call.data.split("+")[0]
    if func == 'order_details':
        id = call.data.split("+")[1]
        order_details(call.message, id)
        return
    elif func == "product_list":
        pack_state.selected_pack = None
        product_list(call.message)


def order_details(message, id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    resposne = get_order_details(id)
    pack_state.selected_pack = id
    btns = [
        types.InlineKeyboardButton(cancel_button),
        types.InlineKeyboardButton(buy_btn),
    ]

    if resposne["count"] == 0:
        bot.send_message(message.chat.id,"ÿπŸÖŸÑŸäÿ© ÿ¥ÿ±ÿßÿ° ÿ∫Ÿäÿ± ŸÖŸÖŸÉŸÜÿ© ŸÑÿπÿØŸÖ ÿ™ŸàŸÅÿ± ÿßŸÑŸÖŸÜÿ™Ÿàÿ¨ ÿ≥ŸàŸÅ Ÿäÿ™ŸÖ ÿ™ÿπÿ®ÿ¶ÿ™Ÿá ŸàÿßÿπŸÑÿßŸÖŸÉŸÖ")
        pack_list(message)
    else:
        markup.add(btns[0], btns[1])
        reply = buy_msg.format(
            pack=resposne["title"], 
            description=resposne["description"],
            count=resposne["count"],
            price=resposne["price"]
        )
        bot.send_message(message.chat.id, reply, reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == buy_btn)
def get_code(message):
    user_id = message.from_user.id
    resposne = buy({
        "pack_id":pack_state.selected_pack,
        "tg_id": user_id
    })
    resposne = get_products()
    markup = types.ReplyKeyboardMarkup(row_width=2)
    resposne = json.loads(resposne)
    arr = []
    product_state.clear()
    
    for product in resposne:
        if len(arr) == 1:
            arr.append(types.InlineKeyboardButton(
                product['fields']["title"], 
                ))
            markup.add(arr[0], arr[1])
            arr = []
        elif len(arr) == 0:
            arr.append(types.InlineKeyboardButton(product['fields']["title"]))
        product_state.add({"title": product['fields']["title"], "id": product['pk'] })
    
    if len(arr) == 1:
        markup.add(types.InlineKeyboardButton(product['fields']["title"]))
    markup.add(
        types.InlineKeyboardButton(text=back_btn),
    )
    try:
        bot.send_message(message.chat.id, success_msg.format(
            code=resposne["code"],
            price=resposne["price"]
        ), reply_markup=markup)
        bot.send_message(ADMIN_CHAT_ID, admin_msg.format(
            pack=resposne["pack"],
            user=resposne["user"],
            price=resposne["price"]
        ))
    except KeyError:
        bot.send_message(message.chat.id, error_msg, reply_markup=markup)
    product_list(message, False)

@bot.message_handler(func=lambda message: message.text == ask_for_balance_btn)
def ask_for_balance(message):
    bot.send_message(message.chat.id, ask_for_balance_msg)


print("--------- Bot is Running üìã --------")
bot.infinity_polling()